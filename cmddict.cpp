/*
Copyright 2015  Ian Knight <ian@knightly.xyz>

This file is part of atem-cli.

atem-cli is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Foobar is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with atem-cli.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <QtCore>
#include <QStringList>
#include <QApplication>
#include <iostream>

#include "cliapp.h"
#include "cmddict.h"

#define NULL_A NULL
#define NULL_B NULL
#define NULL_C NULL
#define NULL_D NULL
#define NULL_E NULL
#define NULL_F NULL
#define NULL_G NULL
#define NULL_H NULL
#define NULL_I NULL
#define NULL_J NULL
#define NULL_K NULL
#define NULL_L NULL
#define NULL_M NULL
#define NULL_N NULL
#define NULL_O NULL
#define NULL_P NULL
#define NULL_Q NULL
#define NULL_R NULL
#define NULL_S NULL
#define NULL_T NULL
#define NULL_U NULL
#define NULL_V NULL
#define NULL_W NULL
#define NULL_X NULL
#define NULL_Y NULL
#define NULL_Z NULL
 

/* Layer 20 */
/* Layer 19 */
/* Layer 18 */
/* Layer 17 */
/* Layer 16 */
/* Layer 15 */
/* Layer 14 */
/* Layer 13 */
struct CmdTrieNode cmdFTBFRAMESLEFT = {&CmdDict::preFadeToBlackFramesLeft,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
/* Layer 12 */
struct CmdTrieNode cmdFTBFRAMESLEF = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdFTBFRAMESLEFT, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdVDOWNCONTYPE = {&CmdDict::preVideoDownConvertType,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
/* Layer 11 */
struct CmdTrieNode cmdFTBFRAMESLE = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, &cmdFTBFRAMESLEF, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEFILLSRC = {&CmdDict::preTransitionDVEFillSource,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdVDOWNCONTYP = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdVDOWNCONTYPE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
/* Layer 10 */
struct CmdTrieNode cmdTCURRSTYLE = {&CmdDict::preTransitionCurrentStyle,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdFTBFRAMESL = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdFTBFRAMESLE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTDIPFRAMES = {&CmdDict::preTransitionDipFrames,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEEFFECT = {&CmdDict::preTransitionDVEEffect,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEFILLSR = {&CmdDict::invalid,{NULL_A, NULL_B, &cmdTDVEFILLSRC, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEFRAMES = {&CmdDict::preTransitionDVEFrames,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTMIXFRAMES = {&CmdDict::preTransitionMixFrames,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTNEXTSTYLE = {&CmdDict::preTransitionNextStyle,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdVDOWNCONTY = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, &cmdVDOWNCONTYP, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
/* Layer  9 */
struct CmdTrieNode cmdAMSTRGAIN = {&CmdDict::preAudioMasterGain,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAMSTRPEAK = {&CmdDict::preAudioMasterPeak,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdFTBFRAMES = {&CmdDict::preFadeToBlackFrames,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, &cmdFTBFRAMESL, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTCURRSTYL = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdTCURRSTYLE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTDIPFRAME = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdTDIPFRAMES, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEEFFEC = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdTDVEEFFECT, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEFILLS = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, &cmdTDVEFILLSR, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEFRAME = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdTDVEFRAMES, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTMIXFRAME = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdTMIXFRAMES, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTNEXTSTYL = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdTNEXTSTYLE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdVDOWNCONT = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, &cmdVDOWNCONTY, NULL_Z}};
/* Layer  8 */
struct CmdTrieNode cmdAINSTATE = {&CmdDict::preAudioInState,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAMSTRGAI = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, &cmdAMSTRGAIN, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAMSTRLVL = {&CmdDict::preAudioMasterLevels,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAMSTRPEA = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, &cmdAMSTRPEAK, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdFTBFRAME = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdFTBFRAMES, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdSETTINGS = {&CmdDict::preSettings,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTCURRKEY = {&CmdDict::preTransitionCurrentKey,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTCURRSTY = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, &cmdTCURRSTYL, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTDIPFRAM = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdTDIPFRAME, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEEFFE = {&CmdDict::invalid,{NULL_A, NULL_B, &cmdTDVEEFFEC, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEFILL = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdTDVEFILLS, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEFRAM = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdTDVEFRAME, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTLYCHNLS = {&CmdDict::preTallyChannelCount,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTLYINDXS = {&CmdDict::preTallyIndexCount,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTLYSTATE = {&CmdDict::preTallyState,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTMIXFRAM = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdTMIXFRAME, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTNEXTKEY = {&CmdDict::preTransitionNextKey,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTNEXTSTY = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, &cmdTNEXTSTYL, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdVDOWNCON = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdVDOWNCONT, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
/* Layer  7 */
struct CmdTrieNode cmdAINGAIN = {&CmdDict::preAudioInGain,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAININFO = {&CmdDict::preAudioInInfo,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAINPEAK = {&CmdDict::preAudioInPeak,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAINSTAT = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdAINSTATE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAMSTRGA = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, &cmdAMSTRGAI, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAMSTRLV = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, &cmdAMSTRLVL, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAMSTRPE = {&CmdDict::invalid,{&cmdAMSTRPEA, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdCLRGENC = {&CmdDict::preColorGeneratorColor,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdFTBFRAM = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdFTBFRAME, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdFTBLIVE = {&CmdDict::preFadeToBlackFading,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdINNAMEL = {&CmdDict::preInputNameLong,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdINNAMES = {&CmdDict::preInputNameShort,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdSETTING = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdSETTINGS, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTCURRKE = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, &cmdTCURRKEY, NULL_Z}};
struct CmdTrieNode cmdTCURRST = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, &cmdTCURRSTY, NULL_Z}};
struct CmdTrieNode cmdTDIPFRA = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, &cmdTDIPFRAM, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTDIPSRC = {&CmdDict::preTransitionDipSource,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEEFF = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdTDVEEFFE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEFIL = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, &cmdTDVEFILL, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEFRA = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, &cmdTDVEFRAM, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTFRAMES = {&CmdDict::preTransitionFrames,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTLYCHNL = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdTLYCHNLS, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTLYINDX = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdTLYINDXS, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTLYSTAT = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdTLYSTATE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTMIXFRA = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, &cmdTMIXFRAM, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTNEXTBG = {&CmdDict::preTransitionNextBackground,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTNEXTKE = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, &cmdTNEXTKEY, NULL_Z}};
struct CmdTrieNode cmdTNEXTST = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, &cmdTNEXTSTY, NULL_Z}};
struct CmdTrieNode cmdVDOWNCO = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, &cmdVDOWNCON, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
/* Layer  6 */
struct CmdTrieNode cmdACHNLS = {&CmdDict::preAudioChannelCount,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAINBAL = {&CmdDict::preAudioInBalance,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAINGAI = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, &cmdAINGAIN, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAININF = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, &cmdAININFO, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAINPEA = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, &cmdAINPEAK, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAINSTA = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdAINSTAT, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAMSTRG = {&CmdDict::invalid,{&cmdAMSTRGA, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAMSTRL = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, &cmdAMSTRLV, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAMSTRP = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdAMSTRPE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAUXSRC = {&CmdDict::preAuxSource,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdCLRGEN = {&CmdDict::invalid,{NULL_A, NULL_B, &cmdCLRGENC, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdFTBFRA = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, &cmdFTBFRAM, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdFTBLIV = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdFTBLIVE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdININFO = {&CmdDict::preInputInfo,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdINNAME = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, &cmdINNAMEL, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdINNAMES, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdINTYPE = {&CmdDict::preInputType,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdSETTIN = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, &cmdSETTING, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTCURRK = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdTCURRKE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTCURRS = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdTCURRST, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTDIPFR = {&CmdDict::invalid,{&cmdTDIPFRA, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTDIPSR = {&CmdDict::invalid,{NULL_A, NULL_B, &cmdTDIPSRC, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEEF = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, &cmdTDVEEFF, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEFI = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, &cmdTDVEFIL, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEFR = {&CmdDict::invalid,{&cmdTDVEFRA, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTFRAME = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdTFRAMES, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTLYCHN = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, &cmdTLYCHNL, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTLYIND = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, &cmdTLYINDX, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTLYSTA = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdTLYSTAT, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTMIXFR = {&CmdDict::invalid,{&cmdTMIXFRA, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTNEXTB = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, &cmdTNEXTBG, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTNEXTK = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdTNEXTKE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTNEXTS = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdTNEXTST, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdVDOWNC = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, &cmdVDOWNCO, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
/* Layer  5 */
struct CmdTrieNode cmdACHNL = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdACHNLS, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAINBA = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, &cmdAINBAL, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAINGA = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, &cmdAINGAI, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAININ = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, &cmdAININF, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAINPE = {&CmdDict::invalid,{&cmdAINPEA, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAINST = {&CmdDict::invalid,{&cmdAINSTA, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdALVLS = {&CmdDict::preAudioLevels,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAMSTR = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, &cmdAMSTRG, NULL_H, NULL_I, NULL_J, NULL_K, &cmdAMSTRL, NULL_M, NULL_N, NULL_O, &cmdAMSTRP, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAUXSR = {&CmdDict::invalid,{NULL_A, NULL_B, &cmdAUXSRC, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdCLRGE = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, &cmdCLRGEN, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdDEBUG = {&CmdDict::preDebug,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdFTBFR = {&CmdDict::invalid,{&cmdFTBFRA, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdFTBLI = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, &cmdFTBLIV, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdININF = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, &cmdININFO, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdINNAM = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdINNAME, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdINTYP = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdINTYPE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdSETTI = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, &cmdSETTIN, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTCURR = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, &cmdTCURRK, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdTCURRS, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTDIPF = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, &cmdTDIPFR, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTDIPS = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, &cmdTDIPSR, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEE = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, &cmdTDVEEF, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVEF = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, &cmdTDVEFR, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTFRAM = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdTFRAME, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTLYCH = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, &cmdTLYCHN, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTLYIN = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, &cmdTLYIND, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTLYST = {&CmdDict::invalid,{&cmdTLYSTA, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTMIXF = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, &cmdTMIXFR, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTNEXT = {&CmdDict::invalid,{NULL_A, NULL_B/*&cmdTNEXTB*/, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K/*&cmdTNEXTK*/, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdTNEXTS, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTPREV = {&CmdDict::preTransitionPreview,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTRANS = {&CmdDict::preAutoTransition,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdVDOWN = {&CmdDict::invalid,{NULL_A, NULL_B, &cmdVDOWNC, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
/* Layer  4 */
struct CmdTrieNode cmdACHN = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, &cmdACHNL, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAINB = {&CmdDict::invalid,{&cmdAINBA, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAING = {&CmdDict::invalid,{&cmdAINGA, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAINI = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, &cmdAININ, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAINP = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdAINPE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAINS = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdAINST, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdALVL = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdALVLS, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAMST = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, &cmdAMSTR, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAUXS = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, &cmdAUXSR, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdCLRG = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdCLRGE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdCONN = {&CmdDict::preConnection,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdDEBU = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, &cmdDEBUG, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdFTBF = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, &cmdFTBFR, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdFTBL = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, &cmdFTBLI, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdINFO = {&CmdDict::preInfo,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdININ = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, &cmdININF, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdINNA = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, &cmdINNAM, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdINTY = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, &cmdINTYP, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdPREV = {&CmdDict::prePreview,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdPROG = {&CmdDict::preProgram,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdSETT = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, &cmdSETTI, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTCUR = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, &cmdTCURR, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTDIP = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, &cmdTDIPF, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdTDIPS, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDVE = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdTDVEE, &cmdTDVEF, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTFRA = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, &cmdTFRAM, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTLYC = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, &cmdTLYCH, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTLYI = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, &cmdTLYIN, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTLYS = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdTLYST, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTMIX = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, &cmdTMIXF, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTNEX = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdTNEXT, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTPOS = {&CmdDict::preTransitionPosition,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTPRE = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, &cmdTPREV, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTRAN = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdTRANS, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdVDOW = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, &cmdVDOWN, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdVFMT = {&CmdDict::preVideoFormat,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
/* Layer  3 */
struct CmdTrieNode cmdACH = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, &cmdACHN, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAIN = {&CmdDict::invalid,{NULL_A, &cmdAINB, NULL_C, NULL_D, NULL_E, NULL_F, &cmdAING, NULL_H, &cmdAINI, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, &cmdAINP, NULL_Q, NULL_R, &cmdAINS, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdALV = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, &cmdALVL, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAMS = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdAMST, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAUX = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdAUXS, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdCLR = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, &cmdCLRG, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdCON = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, &cmdCONN, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdCUT = {&CmdDict::preCut,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdDEB = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, &cmdDEBU, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdFTB = {&CmdDict::preFadeToBlack,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, &cmdFTBF, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, &cmdFTBL, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdINI = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, &cmdININ, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdINF = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, &cmdINFO, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdINN = {&CmdDict::invalid,{&cmdINNA, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdINT = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, &cmdINTY, NULL_Z}};
struct CmdTrieNode cmdPRE = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, &cmdPREV, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdPRO = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, &cmdPROG, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdSET = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdSETT, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTCU = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, &cmdTCUR, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTDI = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, &cmdTDIP, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdTDV = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdTDVE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTFR = {&CmdDict::invalid,{&cmdTFRA, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTLY = {&CmdDict::invalid,{NULL_A, NULL_B, &cmdTLYC, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, &cmdTLYI, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdTLYS, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTMI = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, &cmdTMIX, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTNE = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, &cmdTNEX, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTPO = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdTPOS, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTPR = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdTPRE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTRA = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, &cmdTRAN, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdVDO = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, &cmdVDOW, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdVFM = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdVFMT, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
/* Layer  2 */
struct CmdTrieNode cmdAC = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, &cmdACH, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAI = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, &cmdAIN, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAL = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, &cmdALV, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAM = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, &cmdAMS, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdAU = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, &cmdAUX, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdCL = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, &cmdCLR, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdCO = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, &cmdCON, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdCU = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdCUT, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdDE = {&CmdDict::invalid,{NULL_A, &cmdDEB, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdFT = {&CmdDict::invalid,{NULL_A, &cmdFTB, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdIN = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, &cmdINF, NULL_G, NULL_H, &cmdINI, NULL_J, NULL_K, NULL_L, NULL_M, &cmdINN, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdINT, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdPR = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdPRE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, &cmdPRO, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdSE = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdSET, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTC = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, &cmdTCU, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTD = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, &cmdTDI, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V/*&cmdTDV*/, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTF = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, &cmdTFR, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTL = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, &cmdTLY, NULL_Z}};
struct CmdTrieNode cmdTM = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, &cmdTMI, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTN = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdTNE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTP = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, &cmdTPO, NULL_P, NULL_Q, &cmdTPR, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdTR = {&CmdDict::invalid,{&cmdTRA, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdVD = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, &cmdVDO, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdVF = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, &cmdVFM, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
/* Layer  1 */
struct CmdTrieNode cmdA = {&CmdDict::invalid,{NULL_A, NULL_B, &cmdAC, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, &cmdAI, NULL_J, NULL_K, &cmdAL, &cmdAM, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, &cmdAU, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdC = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, &cmdCL, NULL_M, NULL_N, &cmdCO, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, &cmdCU, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdD = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdDE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdF = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, &cmdFT, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdI = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, &cmdIN, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdP = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, &cmdPR, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdS = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, &cmdSE, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdT = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C/*&cmdTC*/, &cmdTD, NULL_E, &cmdTF, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, &cmdTL, &cmdTM, NULL_N, NULL_O, &cmdTP, NULL_Q, &cmdTR, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
struct CmdTrieNode cmdV = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, &cmdVD, NULL_E, &cmdVF, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
//struct CmdTrieNode cmdX = {&CmdDict::invalid,{NULL_A, NULL_B, NULL_C, NULL_D, NULL_E, NULL_F, NULL_G, NULL_H, NULL_I, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, NULL_P, NULL_Q, NULL_R, NULL_S, NULL_T, NULL_U, NULL_V, NULL_W, NULL_X, NULL_Y, NULL_Z}};
/* Root Node */
struct CmdTrieNode cmdRoot = {&CmdDict::invalid,{&cmdA, NULL_B, &cmdC, &cmdD, NULL_E, &cmdF, NULL_G, NULL_H, &cmdI, NULL_J, NULL_K, NULL_L, NULL_M, NULL_N, NULL_O, &cmdP, NULL_Q, NULL_R, &cmdS, &cmdT, NULL_U, &cmdV, NULL_W, NULL_X, NULL_Y, NULL_Z}};

struct CmdTrieNode * CmdDict::cmdTrieRoot = &cmdRoot;
CLIApp * CmdDict::app = NULL;

CmdDict::CmdDict(CLIApp * app){
    this->app = app;
}

/**
 * Parses Command 
 */
void CmdDict::parseCommand(QStringList cmd){
    
    if(cmd.size()<2){
        if(cmd.size()==1){
            if(cmd[0].toUpper()=="HELP"){
                preHelp(cmd);
            } else if(cmd[0].toUpper()=="QUIT"){
                preQuit(cmd);
            } else if(cmd[0].toUpper()=="EXIT"){
                preQuit(cmd);
            } else {
                invalid(cmd);
            }
        } else {
            invalid(cmd);
        }
        return;
    }
    
    QString key = cmd[1].toUpper(); //extract key that Trie traverses
    
    
    struct CmdTrieNode * node = cmdTrieRoot;
    for(int i = 0; i < key.size(); i++) {
        
        int charIndex = (int)(key.at(i).toLatin1())-(int)('A'); // Take character at current position and convert to a value from 0-25
        if(charIndex<0 || charIndex > 25){
            // If invalid character, run invalid function & return.
            invalid(cmd);
            return;
        }
        
        node = node->nextChar[charIndex]; // Get Node for character.
        if(node == NULL){
            // If no node for character, run invalid function & return.
            invalid(cmd);
            return;
        }

    }
    
    node->currentCmd(cmd);
    
}



void CmdDict::invalid(QStringList cmd){
    Q_UNUSED(cmd)
    app->invalidCmd();
}

void CmdDict::preHelp(QStringList cmd){
    Q_UNUSED(cmd)
    app->help();
}

void CmdDict::preQuit(QStringList cmd){
    Q_UNUSED(cmd)
    app->quit();
}

void CmdDict::preAudioChannelCount(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getAudioChannelCount();
        }
    } else if(cmd[0].toUpper()=="HELP"){
        app->helpASrc();
    } else {
        invalid(cmd);
    }
}

void CmdDict::preAudioInBalance(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->getAudioInBalance((quint16)cmd[2].toInt());
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 4){
            invalid(cmd);
        } else {
            app->setAudioInBalance((quint16)cmd[2].toInt(),cmd[3].toFloat());
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preAudioInGain(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->getAudioInGain((quint16)cmd[2].toInt());
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 4){
            invalid(cmd);
        } else {
            app->setAudioInGain((quint16)cmd[2].toInt(),cmd[3].toFloat());
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preAudioInInfo(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->getAudioInInfo((quint16)cmd[2].toInt());
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preAudioInPeak(QStringList cmd){
    if(cmd[0].toUpper()=="RESET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->resetAudioInPeak((quint16)cmd[2].toInt());
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preAudioInState(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->getAudioInState((quint16)cmd[2].toInt());
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 4){
            invalid(cmd);
        } else {
            app->setAudioInState((quint16)cmd[2].toInt(),(quint8)cmd[3].toInt()); //0 = Off, 1 = On, 2 = AFV
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preAudioLevels(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()< 3){
            invalid(cmd);
        } else {
            QList<quint16> channels;
            if(cmd[2].toUpper()!="ALL"){ // populate channel list if not all
                for(int i=2; i<cmd.size(); i++){
                    channels.append((quint16)cmd[i].toInt());
                }
            }
            app->getAudioLevels(channels);
        }
    } else if(cmd[0].toUpper()=="ENABLE"){
        if(cmd.size()< 2){
            invalid(cmd);
        } else {
            QList<quint16> channels;
            for(int i=2; i<cmd.size(); i++){
                channels.append((quint16)cmd[i].toInt());
            }
            app->enableAudioLevels(true, channels);
        }
        
    } else if(cmd[0].toUpper()=="DISABLE"){
        if(cmd.size() != 2){
            invalid(cmd);
        } else {
            app->enableAudioLevels(false,QList<quint16>());
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preAudioMasterGain(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getAudioMasterGain();
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->setAudioMasterGain(cmd[2].toFloat());
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preAudioMasterLevels(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getAudioMasterLevels();
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preAudioMasterPeak(QStringList cmd){
    if(cmd[0].toUpper()=="RESET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->resetAudioMasterPeak();
        }
    } else {
        invalid(cmd);
    }
}

/* GET/SET AUXSRC AUXCHNL INPUT */
void CmdDict::preAuxSource(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->getAuxSource((quint8)cmd[2].toInt());
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 4){
            invalid(cmd);
        } else {
            app->setAuxSource((quint8)cmd[2].toInt(),(quint16)cmd[3].toInt());
        }
    } else if(cmd[0].toUpper()=="HELP"){
        app->helpVSrc();
    } else {
        invalid(cmd);
    }
}

void CmdDict::preColorGeneratorColor(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->getColorGeneratorColor((quint8)cmd[2].toInt());
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 6){
            invalid(cmd);
        } else {
            app->setColorGeneratorColor((quint8)cmd[2].toInt(),(quint8)cmd[3].toInt(),(quint8)cmd[4].toInt(),(quint8)cmd[5].toInt()); // RGB 0-255
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preConnection(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getConnection();
        }
    } else if(cmd[0].toUpper()=="START"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->setConnection(true);
        }
    } else if(cmd[0].toUpper()=="STOP"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->setConnection(false);
        }
    } else {
        invalid(cmd);
    }
}

/* DO CUT */
void CmdDict::preCut(QStringList cmd){
    if(cmd[0].toUpper()=="DO"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->doCut();
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preDebug(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getConnection();
        }
    } else if(cmd[0].toUpper()=="ENABLE"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->setDebug(true);
        }
    } else if(cmd[0].toUpper()=="DISABLE"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->setDebug(false);
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preFadeToBlack(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getFadeToBlack();
        }
    } else if(cmd[0].toUpper()=="TOGGLE"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->toggleFadeToBlack();
        }
    } else if(cmd[0].toUpper()=="DO"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->setFadeToBlack(true);
        }
    } else if(cmd[0].toUpper()=="UNDO"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->setFadeToBlack(false);
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preFadeToBlackFrames(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getFadeToBlackFrames();
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->setFadeToBlackFrames((quint8)cmd[2].toInt());
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preFadeToBlackFramesLeft(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getFadeToBlackFramesLeft();
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preFadeToBlackFading(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getFadeToBlackFading();
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preInfo(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getAtemInfo();
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preInputInfo(QStringList cmd){
    Q_UNUSED(cmd)
}

void CmdDict::preInputNameLong(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->getInputNameLong((quint16)cmd[2].toInt());
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 4){
            invalid(cmd);
        } else {
            app->setInputNameLong((quint16)cmd[2].toInt(),cmd[3]);
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preInputNameShort(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->getInputNameShort((quint16)cmd[2].toInt());
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 4){
            invalid(cmd);
        } else {
            app->setInputNameShort((quint16)cmd[2].toInt(),cmd[3]);
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preInputType(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->getInputType((quint16)cmd[2].toInt());
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 4){
            invalid(cmd);
        } else {
            app->setInputType((quint16)cmd[2].toInt(),(quint8)cmd[3].toInt()); //0 = Off, 1 = On, 2 = AFV
        }
    } else {
        invalid(cmd);
    }
}

/* GET/SET PREV INPUT */
void CmdDict::prePreview(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getPreview();
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->setPreview((quint16)cmd[2].toInt());
        }
    } else if(cmd[0].toUpper()=="HELP"){
        app->helpVSrc();
    } else {
        invalid(cmd);
    }
}

/* GET/SET PROG INPUT */
void CmdDict::preProgram(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getProgram();
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->setProgram((quint16)cmd[2].toInt());
        }
    } else if(cmd[0].toUpper()=="HELP"){
        app->helpVSrc();
    } else {
        invalid(cmd);
    }
}

void CmdDict::preSettings(QStringList cmd){
    if(cmd[0].toUpper()=="SAVE"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->saveSettings();
        }
    } else if(cmd[0].toUpper()=="CLEAR"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            if(cmd[2].toUpper()=="YES"){
                app->clearSettings();
            } else {
                invalid(cmd);
            }
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preTransitionCurrentKey(QStringList cmd){
    Q_UNUSED(cmd)
}

void CmdDict::preTransitionCurrentStyle(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getTransitionCurrentStyle();
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preTransitionDipFrames(QStringList cmd){
    Q_UNUSED(cmd)
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getTransitionDipFrames();
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->setTransitionDipFrames((quint8)cmd[2].toInt());
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preTransitionDipSource(QStringList cmd){
    Q_UNUSED(cmd)
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getTransitionDipSource();
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->setTransitionDipSource((quint16)cmd[2].toInt());
        }
    } else {
        invalid(cmd);
    }
}

/*
void CmdDict::preTransitionDVEEffect(QStringList cmd){
    Q_UNUSED(cmd)
}

void CmdDict::preTransitionDVEFillSource(QStringList cmd){
    Q_UNUSED(cmd)
}

void CmdDict::preTransitionDVEFrames(QStringList cmd){
    Q_UNUSED(cmd)
}
*/

void CmdDict::preTransitionFrames(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getTransitionFrames();
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preTallyChannelCount(QStringList cmd){
    Q_UNUSED(cmd)
}

void CmdDict::preTallyIndexCount(QStringList cmd){
    Q_UNUSED(cmd)
}

void CmdDict::preTallyState(QStringList cmd){
    Q_UNUSED(cmd)
}

void CmdDict::preTransitionMixFrames(QStringList cmd){
    Q_UNUSED(cmd)
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getTransitionMixFrames();
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->setTransitionMixFrames((quint8)cmd[2].toInt());
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preTransitionNextBackground(QStringList cmd){
    Q_UNUSED(cmd)
}

void CmdDict::preTransitionNextKey(QStringList cmd){
    Q_UNUSED(cmd)
}

void CmdDict::preTransitionNextStyle(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getTransitionNextStyle();
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->setTransitionNextStyle((quint8)cmd[2].toInt());
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preTransitionPosition(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getTransitionPosition();
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->setTransitionPosition((quint16)cmd[2].toInt());
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preTransitionPreview(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!=2){
            invalid(cmd);
        } else {
            app->getTransitionPreview();
        }
    } else if(cmd[0].toUpper()=="ENABLE"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->setTransitionPreview(true);
        }
        
    } else if(cmd[0].toUpper()=="DISABLE"){
        if(cmd.size() != 2){
            invalid(cmd);
        } else {
            app->setTransitionPreview(false);
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preAutoTransition(QStringList cmd){
     if(cmd[0].toUpper()=="DO"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->doAutoTransition();
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preVideoDownConvertType(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getVideoDownConvertType();
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->setVideoDownConvertType((quint8)cmd[2].toInt());
        }
    } else {
        invalid(cmd);
    }
}

void CmdDict::preVideoFormat(QStringList cmd){
    if(cmd[0].toUpper()=="GET"){
        if(cmd.size()!= 2){
            invalid(cmd);
        } else {
            app->getVideoFormat();
        }
    } else if(cmd[0].toUpper()=="SET"){
        if(cmd.size()!= 3){
            invalid(cmd);
        } else {
            app->setVideoFormat((quint8)cmd[2].toInt());
        }
    } else if(cmd[0].toUpper()=="HELP"){
        app->helpVFmt();
    } else {
        invalid(cmd);
    }
}
